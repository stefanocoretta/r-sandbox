---
title: "BRM non-linear syntax"
format: html
---

```{r}
library(tidyverse)
library(brms)
library(truncdist)
library(tidybayes)
library(coretta2018itapol)
data("token_measures")

token_measures <- token_measures %>%
  mutate(
    lan_voi = interaction(language, c2_phonation)
  )
```

```{r}
bm_1 <- brm(
  bf(
    v1_duration ~ a,
    a ~ 0 + c2_phonation,
    nl = TRUE
  ),
  data = token_measures,
  family = gaussian,
  prior = c(
    prior(normal(100, 100), class = b, nlpar = a, lb = 0)
  ),
  chains = 1,
  iter = 1000,
  threads = threading(8),
  backend = "cmdstanr"
)
```

```{r}
get_prior(
  bf(
    v1_duration ~ a + b * c,
    a ~ 0 + c2_phonation + (0 + c2_phonation |p| speaker),
    b ~ 0 + c2_phonation + (0 + c2_phonation |p| speaker),
    c ~ 0 + language,
    nl = TRUE
  ),
  data = token_measures,
  family = lognormal,
)
```

```{r}
qtrunc(0.975, "cauchy", a = 0, scale = 0.1)
qtrunc(0.975, "cauchy", a = 0, scale = 0.25)
```


```{r}
bm_2_priors <- brm(
  bf(
    v1_duration ~ 0 + a + b * c,
    a ~ 0 + c2_phonation + (0 + c2_phonation |p| speaker),
    b ~ 0 + c2_phonation + (0 + c2_phonation |p| speaker),
    c ~ 0 + language,
    nl = TRUE
  ),
  data = token_measures,
  family = gaussian,
  prior = c(
    prior(normal(50, 50), class = b, nlpar = a, lb = 0),
    prior(normal(50, 50), class = b, nlpar = b, lb = 0),
    prior(normal(50, 50), class = b, nlpar = c, lb = 0),
    prior(cauchy(0, 8), class = sd, nlpar = a),
    prior(cauchy(0, 8), class = sd, nlpar = b),
    prior(cauchy(0, 8), class = sigma)
  ),
  sample_prior = "only",
  chains = 1,
  iter = 1000,
  threads = threading(8),
  backend = "cmdstanr"
)

# bm_2_priors
```

```{r}
conditional_effects(bm_2_priors, "language:c2_phonation")
```


```{r}
bm_2 <- brm(
  bf(
    v1_duration ~ 0 + a + b * c,
    a ~ 0 + c2_phonation + (0 + c2_phonation |p| speaker),
    b ~ 0 + c2_phonation + (0 + c2_phonation |p| speaker),
    c ~ 0 + language,
    nl = TRUE
  ),
  data = token_measures,
  family = gaussian,
  prior = c(
    prior(normal(50, 50), class = b, nlpar = a, lb = 0),
    prior(normal(50, 50), class = b, nlpar = b, lb = 0),
    prior(normal(50, 50), class = b, nlpar = c, lb = 0),
    prior(cauchy(0, 8), class = sd, nlpar = a),
    prior(cauchy(0, 8), class = sd, nlpar = b),
    prior(cauchy(0, 8), class = sigma)
  ),
  chains = 1,
  iter = 1000,
  threads = threading(8),
  backend = "cmdstanr"
)

bm_2
```

```{r}
bm_3_priors <- brm(
  bf(
    v1_duration ~ 0 + a + b * language,
    a ~ 0 + c2_phonation + (0 + c2_phonation |p| speaker),
    b ~ 0 + c2_phonation + (0 + c2_phonation |p| speaker),
    nl = TRUE
  ),
  data = token_measures,
  family = gaussian,
  prior = c(
    prior(normal(50, 100), class = b, nlpar = a, lb = 0),
    prior(normal(0, 50), class = b, nlpar = b),
    prior(cauchy(0, 8), class = sd, nlpar = a),
    prior(cauchy(0, 8), class = sd, nlpar = b),
    prior(cauchy(0, 8), class = sigma)
  ),
  sample_prior = "only",
  chains = 1,
  iter = 1000,
  threads = threading(8),
  backend = "cmdstanr"
)

bm_3_priors
```

```{r}
conditional_effects(bm_3_priors, "language:c2_phonation")
```



```{r}
bm_3 <- brm(
  bf(
    v1_duration ~ 0 + a + b * language,
    a ~ 0 + c2_phonation + (0 + c2_phonation |p| speaker),
    b ~ 0 + c2_phonation + (0 + c2_phonation |p| speaker),
    nl = TRUE
  ),
  data = token_measures,
  family = gaussian,
  prior = c(
    prior(normal(50, 100), class = b, nlpar = a, lb = 0),
    prior(normal(0, 50), class = b, nlpar = b),
    prior(cauchy(0, 8), class = sd, nlpar = a),
    prior(cauchy(0, 8), class = sd, nlpar = b),
    prior(cauchy(0, 8), class = sigma)
  ),
  chains = 1,
  iter = 1000,
  threads = threading(8),
  backend = "cmdstanr"
)

bm_3
```

```{r}
conditional_effects(bm_3, "language:c2_phonation")
```

```{r}
bm_4_priors <- brm(
  bf(
    v1_duration ~ 0 + a,
    a ~ 0 + lan_voi + (0 + c2_phonation |p| speaker),
    nl = TRUE
  ),
  data = token_measures,
  family = gaussian,
  prior = c(
    prior(normal(0, 500), class = b, nlpar = a, lb = 0),
    prior(cauchy(0, 8), class = sd, nlpar = a),
    prior(cauchy(0, 8), class = sigma)
  ),
  sample_prior = "only",
  chains = 1,
  iter = 1000,
  threads = threading(8),
  backend = "cmdstanr"
)

bm_4_priors
```
```{r}
conditional_effects(bm_4_priors)
```

```{r}
bm_4 <- brm(
  bf(
    v1_duration ~ 0 + a,
    a ~ 0 + lan_voi + (0 + c2_phonation |p| speaker),
    nl = TRUE
  ),
  data = token_measures,
  family = gaussian,
  prior = c(
    prior(normal(0, 500), class = b, nlpar = a, lb = 0),
    prior(cauchy(0, 8), class = sd, nlpar = a),
    prior(cauchy(0, 8), class = sigma)
  ),
  chains = 1,
  iter = 1000,
  threads = threading(8),
  backend = "cmdstanr"
)

bm_4
```
```{r}
conditional_effects(bm_4, "lan_voi")
```

```{r}
gather_draws(bm_4, `b_a_.*`, regex = TRUE) %>%
  compare_levels(.value, by = .variable) %>%
  median_qi()
```

```{r}
bm_5 <- brm(
  bf(
    v1_duration ~ 0 + a + b * c2_phonation,
    a ~ 0 + language,
    b ~ 0 + language,
    nl = TRUE
  ),
  data = token_measures,
  family = gaussian,
  prior = c(
    prior(normal(0, 500), class = b, nlpar = a, lb = 0),
    prior(normal(0, 50), class = b, nlpar = b),
    prior(cauchy(0, 8), class = sigma)
  ),
  sample_prior = "only",
  chains = 1,
  iter = 1000,
  threads = threading(8),
  backend = "cmdstanr"
)
```

```{r}
bm_5
```

```{r}
bm_5_fit <- brm(
  bf(
    v1_duration ~ 0 + a + b * c2_phonation,
    a ~ 0 + language,
    b ~ 0 + language,
    nl = TRUE
  ),
  data = token_measures,
  family = gaussian,
  prior = c(
    prior(normal(0, 500), class = b, nlpar = a, lb = 0),
    prior(normal(0, 50), class = b, nlpar = b),
    prior(cauchy(0, 8), class = sigma)
  ),
  chains = 1,
  iter = 1000,
  threads = threading(8),
  backend = "cmdstanr"
)
```

```{r}
bm_5_fit
```


```{r}
conditional_effects(bm_5, "language:c2_phonation")
```

```{r}
bm_5a <- brm(
  v1_duration ~ language * c2_phonation,
  data = token_measures,
  family = gaussian,
  prior = c(
    prior(normal(0, 500), class = Intercept, lb = 0),
    prior(normal(0, 500), class = b, coef = c2_phonationvoiceless),
    prior(normal(0, 500), class = b, coef = languagePolish),
    prior(normal(0, 500), class = b, coef = `languagePolish:c2_phonationvoiceless`),
    prior(cauchy(0, 8), class = sigma)
  ),
  sample_prior = "only",
  chains = 1,
  iter = 1000,
  threads = threading(8),
  backend = "cmdstanr"
)
```

```{r}
conditional_effects(bm_5a, "language:c2_phonation")
```

```{r}
bm_5b <- brm(
  v1_duration ~ language * c2_phonation,
  data = token_measures,
  family = gaussian,
  prior = c(
    prior(normal(0, 50), class = Intercept, lb = 0),
    prior(normal(0, 50), class = b, coef = c2_phonationvoiceless),
    prior(normal(0, 50), class = b, coef = languagePolish),
    prior(normal(0, 50), class = b, coef = `languagePolish:c2_phonationvoiceless`),
    prior(cauchy(0, 8), class = sigma)
  ),
  sample_prior = "only",
  chains = 1,
  iter = 1000,
  threads = threading(8),
  backend = "cmdstanr"
)
```

```{r}
conditional_effects(bm_5b, "language:c2_phonation")
```

```{r}
bm_6_prior <- brm(
  bf(
    v1_duration ~ 0 + a + b * c2_phonation,
    a ~ 0 + language,
    b ~ 0 + language,
    nl = TRUE
  ),
  data = token_measures,
  family = lognormal,
  prior = c(
    prior(normal(4, 1), class = b, nlpar = a),
    prior(normal(0, 0.5), class = b, nlpar = b),
    prior(cauchy(0, 0.01), class = sigma)
  ),
  sample_prior = "only",
  chains = 1,
  iter = 1000,
  threads = threading(8),
  backend = "cmdstanr"
)
```

```{r}
conditional_effects(bm_6, "language:c2_phonation")
```

```{r}
bm_6 <- brm(
  bf(
    v1_duration ~ 0 + a + b * c2_phonation,
    a ~ 0 + language,
    b ~ 0 + language,
    nl = TRUE
  ),
  data = token_measures,
  family = lognormal,
  prior = c(
    prior(normal(4, 1), class = b, nlpar = a),
    prior(normal(0, 0.5), class = b, nlpar = b),
    prior(cauchy(0, 0.01), class = sigma)
  ),
  chains = 1,
  iter = 1000,
  threads = threading(8),
  backend = "cmdstanr"
)
```

```{r}
conditional_effects(bm_6, "language:c2_phonation")
```

```{r}
bm_7_prior <- brm(
  bf(
    v1_duration ~ 0 + a + b * c2_phonation,
    a ~ 0 + language + (0 + c2_phonation | speaker),
    b ~ 0 + language + (0 + c2_phonation | speaker),
    nl = TRUE
  ),
  data = token_measures,
  family = lognormal,
  prior = c(
    prior(normal(4, 1), class = b, nlpar = a),
    prior(cauchy(0, 0.01), class = sd, nlpar = a),
    prior(normal(0, 0.5), class = b, nlpar = b),
    prior(cauchy(0, 0.01), class = sd, nlpar = b),
    prior(cauchy(0, 0.01), class = sigma),
    prior(lkj(2), class = cor)
  ),
  sample_prior = "only",
  chains = 1,
  iter = 1000,
  threads = threading(8),
  backend = "cmdstanr"
)
```

```{r}
conditional_effects(bm_7_prior, "language:c2_phonation")
```

```{r}
bm_7 <- brm(
  bf(
    v1_duration ~ 0 + a + b * c2_phonation,
    a ~ 0 + language + (0 + c2_phonation |p| speaker),
    b ~ 0 + language + (0 + c2_phonation |p| speaker),
    nl = TRUE
  ),
  data = token_measures,
  family = lognormal,
  prior = c(
    prior(normal(4, 1), class = b, nlpar = a),
    prior(cauchy(0, 0.01), class = sd, nlpar = a),
    prior(normal(0, 0.5), class = b, nlpar = b),
    prior(cauchy(0, 0.01), class = sd, nlpar = b),
    prior(cauchy(0, 0.01), class = sigma),
    prior(lkj(2), class = cor)
  ),
  chains = 1,
  iter = 1000,
  threads = threading(8),
  backend = "cmdstanr"
)
```

```{r}
bm_7
```


```{r}
conditional_effects(bm_7, "language:c2_phonation")
```

```{r}
bm_8 <- brm(
  bf(
    v1_duration ~ 0 + a + b * c2_phonation,
    a ~ 0 + language + (0 + c2_phonation |p| speaker),
    b ~ 0 + language + (0 + c2_phonation |p| speaker),
    nl = TRUE
  ),
  data = token_measures,
  family = lognormal,
  cores = 4,
  threads = threading(8),
  backend = "cmdstanr"
)
```

```{r}
bm_8
```

```{r}
conditional_effects(bm_8, "language:c2_phonation", re_formula = NULL)
```


```{r}
bm_9_prior <- brm(
  bf(
    v1_duration ~ 0 + a + b * c2_phonation,
    a ~ 0 + language + (0 + c2_phonation | speaker),
    b ~ 0 + language + (0 + c2_phonation | speaker),
    nl = TRUE
  ),
  data = token_measures,
  family = lognormal,
  prior = c(
    prior(normal(4, 1), class = b, nlpar = a),
    prior(cauchy(0, 0.1), class = sd, nlpar = a),
    prior(normal(0, 0.5), class = b, nlpar = b),
    prior(cauchy(0, 0.1), class = sd, nlpar = b),
    prior(cauchy(0, 0.1), class = sigma),
    prior(lkj(2), class = cor)
  ),
  sample_prior = "only",
  chains = 4,
  threads = threading(2),
  backend = "cmdstanr"
)
```

```{r}
conditional_effects(bm_9_prior, "language:c2_phonation")
```

```{r}
bm_9 <- brm(
  bf(
    v1_duration ~ 0 + a + b * c2_phonation,
    a ~ 0 + language + (0 + c2_phonation |p| speaker),
    b ~ 0 + language + (0 + c2_phonation |p| speaker),
    nl = TRUE
  ),
  data = token_measures,
  family = lognormal,
  prior = c(
    prior(normal(4, 1), class = b, nlpar = a),
    prior(cauchy(0, 0.1), class = sd, nlpar = a),
    prior(normal(0, 0.5), class = b, nlpar = b),
    prior(cauchy(0, 0.1), class = sd, nlpar = b),
    prior(cauchy(0, 0.1), class = sigma),
    prior(lkj(2), class = cor)
  ),
  chains = 4,
  cores = 4,
  threads = threading(2),
  backend = "cmdstanr"
)
```

```{r}
bm_9
```

```{r}
conditional_effects(bm_9, "language:c2_phonation")
```

```{r}
bm_10 <- brm(
  v1_duration ~ language * c2_phonation + (c2_phonation | speaker),
  data = token_measures,
  family = lognormal,
  cores = 4,
  threads = threading(8),
  backend = "cmdstanr"
)
```

```{r}
bm_10
```

```{r}
conditional_effects(bm_10, "language:c2_phonation", re_formula = NULL)
```

```{r}
bm_11 <- brm(
  bf(
    v1_duration ~ 0 + a + b * c2_phonation,
    a ~ 0 + language + (1 | speaker),
    b ~ 0 + language + (0 + c2_phonation |p| speaker),
    nl = TRUE
  ),
  data = token_measures,
  family = lognormal,
  prior = c(
    prior(normal(4, 1), class = b, nlpar = a),
    prior(normal(0, 0.5), class = b, nlpar = b),
    prior(cauchy(0, 0.1), class = sd, nlpar = b),
    prior(cauchy(0, 0.1), class = sigma),
    prior(lkj(2), class = cor)
  ),
  chains = 4,
  cores = 4,
  threads = threading(2),
  backend = "cmdstanr"
)
```

```{r}
bm_11
```

```{r}
conditional_effects(bm_11, "language:c2_phonation")
```

```{r}
bm_12 <- brm(
  bf(
    v1_duration ~ 0 + a + b * c2_phonation,
    a ~ 0 + language + (1 | speaker),
    b ~ 0 + language + (0 + c2_phonation |p| speaker),
    nl = TRUE
  ),
  data = token_measures,
  family = lognormal,
  chains = 4,
  cores = 4,
  threads = threading(2),
  backend = "cmdstanr"
)
```

```{r}
bm_12
```

```{r}
conditional_effects(bm_12, "language:c2_phonation")
```

```{r}
bm_13 <- brm(
  v1_duration ~ language * c2_phonation + (c2_phonation | speaker),
  data = token_measures,
  family = lognormal,
  chains = 4,
  cores = 4,
  threads = threading(2),
  backend = "cmdstanr"
)
```

```{r}
bm_13
```

```{r}
bm_14 <- brm(
  v1_duration ~ language * c2_phonation + (c2_phonation | speaker),
  data = token_measures,
  family = lognormal,
  prior = c(
    prior(normal(4, 1), class = Intercept),
    prior(normal(0, 0.5), class = b),
    prior(cauchy(0, 0.1), class = sd),
    prior(cauchy(0, 0.1), class = sigma),
    prior(lkj(2), class = cor)
  ),
  chains = 4,
  cores = 4,
  threads = threading(2),
  backend = "cmdstanr"
)
```

```{r}
bm_14
```

Clearly, the non-linear parametrisation is somewhat wrong since the sd for c2_phonetionvoiced is VERY LARGE with default priors but it's small with set priors. But this does not happen when using normal parametrisation (bm_13 and bm_14).



